import org.sqlite.SQLiteConfig;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;


import java.util.Properties;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;


public class Main {

    public static Connection db = null;

    public static void main(String[] args) {
        openDatabase("test.db");

        insertWeight(15, "dooley"); //testing
        listUsers();
        deleteUser(5);
        updateUser();  //this doesn't work as I deleted a column in the table

        closeDatabase();
    }

    private static void openDatabase(String dbFile) {
        try {
            Class.forName("org.sqlite.JDBC");
            SQLiteConfig config = new SQLiteConfig();
            config.enforceForeignKeys(true);
            db = DriverManager.getConnection("jdbc:sqlite:resources/" + dbFile, config.toProperties());
            System.out.println("Database connection successfully established.");
        } catch (Exception exception) {
            System.out.println("Database connection error: " + exception.getMessage());
        }

    }

    private static void closeDatabase() {
        try {
            db.close();
            System.out.println("Disconnected from database.");
        } catch (Exception exception) {
            System.out.println("Database disconnection error: " + exception.getMessage());
        }
    }

    public static void insertUser(int userID, String username) {
        try {
            PreparedStatement ps = db.prepareStatement("INSERT INTO Users (UserID, Username) VALUES (?, ?)");

            ps.setInt(1, userID);
            ps.setString(2, username);
            ps.executeUpdate();
            System.out.println("Record added to Users  table");

        } catch (Exception exception) {
            System.out.println(exception.getMessage());
            System.out.println("Error: Something as gone wrong.  Please contact the administrator with the error code WC-WA.");
        }
    }


    public static void listUsers() {
        try {

            PreparedStatement ps = db.prepareStatement("SELECT * FROM Users");

            ResultSet results = ps.executeQuery();
            while (results.next()) {
                int id = results.getInt(1);
                String username = results.getString(2);

                System.out.println(id + " : " + username);
            }

        } catch (Exception exception) {
            System.out.println("Database error: " + exception.getMessage());
        }
    }

    public static void deleteUser(int userID) {
        try {

            PreparedStatement ps = db.prepareStatement("DELETE FROM Users WHERE UserID = ?");
            ps.setInt(1, userID);
            ps.executeUpdate();

        } catch (Exception e) {
            System.out.println(e.getMessage());

        }

    }

    public static void updateUser() {
        //test of rollback with first statement that can be done
        //second statement cannot be done - violation of Unique constraint
        //won't work now as I deleted Total field from database but with a Total field all good

        try {
            Main.db.setAutoCommit(false); //transaction block start

            PreparedStatement ps2 = Main.db.prepareStatement("UPDATE Users SET Total = 100 WHERE UserID = 8");
            ps2.executeUpdate(); //

            PreparedStatement ps = Main.db.prepareStatement("UPDATE Users SET Username = ? WHERE UserID = ?");
            ps.setString(1, "beans");
            ps.setInt(2, 8);
            ps.executeUpdate(); //Error, rollback, including the first insert statement.

            Main.db.commit(); //transaction block end

        } catch (Exception e) {
            System.out.println(e.getMessage());

        }


    }


    public static void sendEmail() {


        //this code uses Mailtrap
        // see https://stackoverflow.com/questions/9086420/using-javamail-to-send-from-hotmail for hotmail settings
        //DON"T SEND CODE TO GITHUB WITH YOUR ACTUAL EMAIL USERNAME AND PASSWORD


        // Put recipient’s address
        String to = "rmasey@farnborough.ac.uk";

        // Put sender’s address
        String from = "test@farnborough.ac.uk";
        final String username = "##########";//username generated by Mailtrap
        final String password = "#########";//password generated by Mailtrap

        // Paste host address from the SMTP settings tab in your Mailtrap Inbox
        String host = "smtp.mailtrap.io";

        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");//it’s optional in Mailtrap
        props.put("mail.smtp.host", host);
        props.put("mail.smtp.port", "2525");// use one of the options in the SMTP settings tab in your Mailtrap Inbox

        // Get the Session object.
        Session session = Session.getInstance(props,
                new javax.mail.Authenticator() {
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(username, password);
                    }
                });

        try {
            // Create a default MimeMessage object.
            Message message = new MimeMessage(session);

            // Set From: header field
            message.setFrom(new InternetAddress(from));

            // Set To: header field
            message.setRecipients(Message.RecipientType.TO,
                    InternetAddress.parse(to));

            // Set Subject: header field
            message.setSubject("My first message with JavaMail");

            // Put the content of your message
            message.setText("Hi there, this is my first message sent with JavaMail");

            // Send message
            Transport.send(message);

            System.out.println("Sent message successfully....");

        } catch (MessagingException e) {
            throw new RuntimeException(e);
        }
    }


}
